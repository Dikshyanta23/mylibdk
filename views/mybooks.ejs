<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>Book Catalog</title>
    <style>
      body {
        font-family: Arial, sans-serif;
        margin: 0;
        padding: 0;
        box-sizing: border-box;
        text-align: center;
      }

      .container {
        display: flex;
        flex-wrap: wrap;
        justify-content: space-between;
      }

      .card {
        width: calc(
          33.33% - 20px
        ); /* By default, three cards per row with space between */
        margin-bottom: 20px;
        padding: 20px;
        border: 1px solid #ccc;
        border-radius: 5px;
        box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
        box-sizing: border-box;
      }

      .card img {
        width: 100%;
        height: 450px;
        border-radius: 5px;
        margin-bottom: 15px; /* Increased margin to provide space between image and text */
      }

      /* Button styles */
      .btn-container {
        display: flex;
        justify-content: space-between; /* Buttons evenly spaced */
        margin-top: 15px; /* Add margin between text and buttons */
      }

      .btn {
        width: calc(
          50% - 5px
        ); /* Adjust button width to be half of the container */
        padding: 10px;
        border: none;
        border-radius: 5px;
        cursor: pointer;
        color: white;
        font-weight: bold;
        text-align: center;
      }

      .edit-btn {
        background-color: #888;
      }

      .delete-btn {
        background-color: #f44336;
      }

      @media screen and (max-width: 768px) {
        .card {
          width: calc(
            50% - 20px
          ); /* Two cards per row with space between on smaller screens */
        }
      }

      @media screen and (max-width: 480px) {
        .card {
          width: 100%; /* Single card per row on smallest screens */
        }
      }
    </style>
    <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
    <script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
    <script>
      const Toast = Swal.mixin({
        toast: true,
        position: "top-right",
        iconColor: "#014B92",
        customClass: {
          popup: "colored-toast",
        },
        showConfirmButton: false,
        timer: 2000,
        timerProgressBar: true,
        didOpen: (toast) => {
          toast.addEventListener("mouseenter", Swal.stopTimer);
          toast.addEventListener("mouseleave", Swal.resumeTimer);
        },
      });
      const Toast2 = Swal.mixin({
        toast: true,
        position: "top-right",
        iconColor: "#014B92",
        customClass: {
          popup: "colored-toast",
        },
        showConfirmButton: false,
        timer: 4000,
        timerProgressBar: true,
        didOpen: (toast) => {
          toast.addEventListener("mouseenter", Swal.stopTimer);
          toast.addEventListener("mouseleave", Swal.resumeTimer);
        },
      });

      function returnBook(id) {
        return fetch(`/dashboard/mybooks/${id}`, {
          method: "POST",
        })
          .then((res) => res.json())
          .then((data) => {
            if (data.title == "success") {
              return Toast.fire({
                icon: "success",
                title: "Book returned sucessfully.",
              }).then(() => {
                window.location.reload();
              });
            }
            if (data.title == "save error") {
              return Toast.fire({
                icon: "error",
                title: "Could not save the changes",
              });
            }
            if (data.title == "update error") {
              return Toast.fire({
                icon: "error",
                title: "Could not update the book",
              });
            }
            if (data.title == "not found") {
              return Toast.fire({
                icon: "error",
                title: "Could not find the book",
              });
            }
            if (data.title == "item error") {
              return Toast.fire({
                icon: "error",
                title: "Book item problem",
              });
            }
          });
      }
    </script>
  </head>
  <body>
    <%- include('nav') %> <% const {isAdmin} = user.dataValues || 'false'%>
    <h1>Book Catalog</h1>
    <div class="container">
      <% books.forEach(book => { %> <% const {returnDate} = book %>
      <div class="card">
        <img src="<%= book.photo %>" alt="<%= book.name %>" />
        <h2><%= book.name %></h2>
        <p><strong>Author:</strong> <%= book.author %></p>
        <p><strong>Genre:</strong> <%= book.genre %></p>
        <p><strong>Published Year:</strong> <%= book.publishedYear %></p>
        <p><strong>Fine Incurred:</strong> $<%= book.fineIncurred %></p>
        <p><strong>Return Date</strong> <%= book.returnDate%></p>
        <p><strong>Borrow Date</strong> <%= book.borrowedDay%></p>

        <button
          class="btn edit-btn"
          id="editBtn"
          onclick="returnBook('<%= book.id %>')"
        >
          <div id="loading" class="lds-dual-ring" style="display: none"></div>
          <span id="noloading">Return</span>
        </button>
        <!-- Buttons -->
      </div>
      <% }) %>
    </div>
  </body>
  <script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
  <script>
    // Send a heartbeat signal to the server every 30 seconds
    setInterval(function () {
      fetch("/heartbeat", {
        method: "POST",
        headers: {
          "Content-Type": "application/json",
        },
        body: JSON.stringify({ timestamp: Date.now() }),
      });
    }, 1000); // 10 seconds
  </script>
</html>
